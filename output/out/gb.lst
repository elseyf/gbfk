                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.7.1 #10455 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module gb
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _vblank_happened
                                     12 	.globl _scroll_y
                                     13 	.globl _scroll_x
                                     14 	.globl _old_joy0
                                     15 	.globl _joy0
                                     16 	.globl _obj_slot
                                     17 	.globl _vram_transfer_buffer
                                     18 	.globl _vram_transfer_size
                                     19 	.globl _obj
                                     20 	.globl _vblank_isr
                                     21 	.globl _lcd_stat_isr
                                     22 	.globl _timer_isr
                                     23 	.globl _serial_isr
                                     24 	.globl _joypad_isr
                                     25 	.globl _init_gameboy
                                     26 	.globl _fastcpy
                                     27 	.globl _fill
                                     28 	.globl _set_bg_chr
                                     29 	.globl _set_bg_map
                                     30 	.globl _set_bg_map_tile
                                     31 	.globl _update_bg_map_tile
                                     32 	.globl _set_obj_chr
                                     33 	.globl _set_obj
                                     34 	.globl _copy_to_oam_obj
                                     35 	.globl _read_joypad
                                     36 	.globl _key_push
                                     37 	.globl _key_hold
                                     38 	.globl _key_release
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area _DATA
    00000000                         46 _obj::
    00000000                         47 	.ds 160
    000000A0                         48 _vram_transfer_size::
    000000A0                         49 	.ds 1
    000000A1                         50 _vram_transfer_buffer::
    000000A1                         51 	.ds 80
    000000F1                         52 _obj_slot::
    000000F1                         53 	.ds 1
    000000F2                         54 _joy0::
    000000F2                         55 	.ds 1
    000000F3                         56 _old_joy0::
    000000F3                         57 	.ds 1
    000000F4                         58 _scroll_x::
    000000F4                         59 	.ds 1
    000000F5                         60 _scroll_y::
    000000F5                         61 	.ds 1
    000000F6                         62 _vblank_happened::
    000000F6                         63 	.ds 1
                                     64 ;--------------------------------------------------------
                                     65 ; absolute external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area _DABS (ABS)
                                     68 ;--------------------------------------------------------
                                     69 ; global & static initialisations
                                     70 ;--------------------------------------------------------
                                     71 	.area _HOME
                                     72 	.area _GSINIT
                                     73 	.area _GSFINAL
                                     74 	.area _GSINIT
                                     75 ;--------------------------------------------------------
                                     76 ; Home
                                     77 ;--------------------------------------------------------
                                     78 	.area _HOME
                                     79 	.area _HOME
                                     80 ;--------------------------------------------------------
                                     81 ; code
                                     82 ;--------------------------------------------------------
                                     83 	.area _CODE
                                     84 ;src/gb.c:20: void vblank_isr() __interrupt {
                                     85 ;	---------------------------------
                                     86 ; Function vblank_isr
                                     87 ; ---------------------------------
    00000000                         88 _vblank_isr::
    00000000 FB                      89 	ei
    00000001 F5                      90 	push	af
    00000002 C5                      91 	push bc
    00000003 D5                      92 	push de
    00000004 E5                      93 	push hl
                                     94 ;src/gb.c:50: __endasm;
    00000005 F3                      95 	di
    00000006 CD 80 FF                96 	call	0xFF80 ;24 + (160 * 4) cycles = 664 cycles
    00000009 FB                      97 	ei
    0000000A FArA0r00                98 	ld	a, (_vram_transfer_size) ;48 + (100 * 20) cycles
    0000000D B7                      99 	or	a ;= 1648 max (16 Bytes)
    0000000E 28 12                  100 	jr	z, 0$
    00000010 5F                     101 	ld	e, a
    00000011 21rA1r00               102 	ld	hl, #_vram_transfer_buffer ;48
    00000014                        103 	        1$:
    00000014 2A                     104 	ld a, (hl+)
    00000015 4F                     105 	ld	c, a
    00000016 2A                     106 	ld	a, (hl+)
    00000017 47                     107 	ld	b, a
    00000018 2A                     108 	ld	a, (hl+)
    00000019 2A                     109 	ld	a, (hl+)
    0000001A 02                     110 	ld	(bc), a
    0000001B 1D                     111 	dec	e
    0000001C 20 F6                  112 	jr	nz, 1$
    0000001E AF                     113 	xor	a
    0000001F EArA0r00               114 	ld	(_vram_transfer_size), a ;100 * 20
    00000022                        115 	    0$:
    00000022 FArF4r00               116 	ld a, (_scroll_x)
    00000025 EA 43 FF               117 	ld	(0xFF43), a
    00000028 FArF5r00               118 	ld	a, (_scroll_y)
    0000002B EA 42 FF               119 	ld	(0xFF42), a
                                    120 ;src/gb.c:51: vblank_happened = true;
    0000002E 21rF6r00               121 	ld	hl, #_vblank_happened
    00000031 36 01                  122 	ld	(hl), #0x01
                                    123 ;src/gb.c:52: }
    00000033 E1                     124 	pop	hl
    00000034 D1                     125 	pop de
    00000035 C1                     126 	pop bc
    00000036 F1                     127 	pop af
    00000037 C9                     128 	ret
                                    129 ;src/gb.c:53: void lcd_stat_isr() __interrupt {;}
                                    130 ;	---------------------------------
                                    131 ; Function lcd_stat_isr
                                    132 ; ---------------------------------
    00000038                        133 _lcd_stat_isr::
    00000038 FB                     134 	ei
    00000039 F5                     135 	push	af
    0000003A C5                     136 	push bc
    0000003B D5                     137 	push de
    0000003C E5                     138 	push hl
    0000003D E1                     139 	pop	hl
    0000003E D1                     140 	pop de
    0000003F C1                     141 	pop bc
    00000040 F1                     142 	pop af
    00000041 C9                     143 	ret
                                    144 ;src/gb.c:54: void timer_isr() __critical __interrupt {;}
                                    145 ;	---------------------------------
                                    146 ; Function timer_isr
                                    147 ; ---------------------------------
    00000042                        148 _timer_isr::
    00000042 F5                     149 	push	af
    00000043 C5                     150 	push bc
    00000044 D5                     151 	push de
    00000045 E5                     152 	push hl
    00000046 E1                     153 	pop	hl
    00000047 D1                     154 	pop de
    00000048 C1                     155 	pop bc
    00000049 F1                     156 	pop af
    0000004A D9                     157 	reti
                                    158 ;src/gb.c:55: void serial_isr() __interrupt {;}
                                    159 ;	---------------------------------
                                    160 ; Function serial_isr
                                    161 ; ---------------------------------
    0000004B                        162 _serial_isr::
    0000004B FB                     163 	ei
    0000004C F5                     164 	push	af
    0000004D C5                     165 	push bc
    0000004E D5                     166 	push de
    0000004F E5                     167 	push hl
    00000050 E1                     168 	pop	hl
    00000051 D1                     169 	pop de
    00000052 C1                     170 	pop bc
    00000053 F1                     171 	pop af
    00000054 C9                     172 	ret
                                    173 ;src/gb.c:56: void joypad_isr() __interrupt {;}
                                    174 ;	---------------------------------
                                    175 ; Function joypad_isr
                                    176 ; ---------------------------------
    00000055                        177 _joypad_isr::
    00000055 FB                     178 	ei
    00000056 F5                     179 	push	af
    00000057 C5                     180 	push bc
    00000058 D5                     181 	push de
    00000059 E5                     182 	push hl
    0000005A E1                     183 	pop	hl
    0000005B D1                     184 	pop de
    0000005C C1                     185 	pop bc
    0000005D F1                     186 	pop af
    0000005E C9                     187 	ret
                                    188 ;src/gb.c:58: void init_gameboy() __naked {
                                    189 ;	---------------------------------
                                    190 ; Function init_gameboy
                                    191 ; ---------------------------------
    0000005F                        192 _init_gameboy::
                                    193 ;src/gb.c:76: __endasm;
                                    194 	.globl	_main
    0000005F                        195 	    1$:
    0000005F 21 00 C0               196 	ld hl, #0xC000 ;clear ((uint8_t*)0xC000) at
    00000062 11 00 20               197 	ld	de, #0x2000 ;0xC000 - 0xDFFF
    00000065 AF                     198 	xor	a
    00000066                        199 	    0$:
    00000066 22                     200 	ld (hl+), a
    00000067 1B                     201 	dec	de
    00000068 BB                     202 	cp	e
    00000069 20 FB                  203 	jr	nz, 0$
    0000006B BA                     204 	cp	d
    0000006C 20 F8                  205 	jr	nz, 0$
    0000006E 31 00 E0               206 	ld	sp, #0xE000 ;Stack points to RAM
    00000071 C3r00r00               207 	jp	_main ;actual start address
                                    208 ;src/gb.c:77: }
                                    209 ;src/gb.c:79: void fastcpy(void* _dst, void* _src, uint16_t _size){
                                    210 ;	---------------------------------
                                    211 ; Function fastcpy
                                    212 ; ---------------------------------
    00000074                        213 _fastcpy::
                                    214 ;src/gb.c:113: __endasm;
                         00000002   215 	dst	= 2
                         00000004   216 	src	= 4
                         00000006   217 	size	= 6
    00000074 F8 06                  218 	ldhl	sp, #size ;bc = _size
    00000076 2A                     219 	ld	a, (hl+)
    00000077 46                     220 	ld	b, (hl)
    00000078 4F                     221 	ld	c, a
    00000079 AF                     222 	xor	a
    0000007A B0                     223 	or	b
    0000007B B1                     224 	or	c
    0000007C 28 13                  225 	jr	z, 1$
    0000007E F8 04                  226 	ldhl	sp, #src ;de = _src
    00000080 2A                     227 	ld	a, (hl+)
    00000081 56                     228 	ld	d, (hl)
    00000082 5F                     229 	ld	e, a
    00000083 F8 02                  230 	ldhl	sp, #dst ;hl = _dst
    00000085 2A                     231 	ld	a, (hl+)
    00000086 66                     232 	ld	h, (hl)
    00000087 6F                     233 	ld	l, a
    00000088                        234 	        0$:
    00000088 1A                     235 	ld a, (de) ;for(;bc > 0; bc--) *(hl++) = *(de++)
    00000089 22                     236 	ld	(hl+), a
    0000008A 13                     237 	inc	de
    0000008B 0B                     238 	dec	bc
    0000008C AF                     239 	xor	a
    0000008D B0                     240 	or	b
    0000008E B1                     241 	or	c
    0000008F 20 F7                  242 	jr	nz, 0$
    00000091                        243 	        1$:
                                    244 ;src/gb.c:114: }
    00000091 C9                     245 	ret
                                    246 ;src/gb.c:116: void fill(void* _dst, uint8_t _val, uint16_t _size){
                                    247 ;	---------------------------------
                                    248 ; Function fill
                                    249 ; ---------------------------------
    00000092                        250 _fill::
                                    251 ;src/gb.c:147: __endasm;
                         00000002   252 	dst	= 2
                         00000004   253 	val	= 4
                         00000005   254 	size	= 5
    00000092 F8 05                  255 	ldhl	sp, #size ;bc = size
    00000094 2A                     256 	ld	a, (hl+)
    00000095 46                     257 	ld	b, (hl)
    00000096 4F                     258 	ld	c, a
    00000097 AF                     259 	xor	a
    00000098 B0                     260 	or	b
    00000099 B1                     261 	or	c
    0000009A 28 10                  262 	jr	z, 1$
    0000009C F8 04                  263 	ldhl	sp, #val ;e = val
    0000009E 5E                     264 	ld	e, (hl)
    0000009F F8 02                  265 	ldhl	sp, #dst ;hl = dst
    000000A1 2A                     266 	ld	a, (hl+)
    000000A2 66                     267 	ld	h, (hl)
    000000A3 6F                     268 	ld	l, a
    000000A4                        269 	        0$:
    000000A4 7B                     270 	ld a, e ;for() *(hl++) = e
    000000A5 22                     271 	ld	(hl+), a
    000000A6 0B                     272 	dec	bc
    000000A7 AF                     273 	xor	a
    000000A8 B0                     274 	or	b
    000000A9 B1                     275 	or	c
    000000AA 20 F8                  276 	jr	nz, 0$
    000000AC                        277 	        1$:
                                    278 ;src/gb.c:148: }
    000000AC C9                     279 	ret
                                    280 ;src/gb.c:150: void set_bg_chr(uint8_t* _data, uint16_t _addr, uint16_t _size){
                                    281 ;	---------------------------------
                                    282 ; Function set_bg_chr
                                    283 ; ---------------------------------
    000000AD                        284 _set_bg_chr::
    000000AD E8 FE                  285 	add	sp, #-2
                                    286 ;src/gb.c:151: fastcpy(BG_CHR + _addr, _data, _size);
    000000AF F8 04                  287 	ldhl	sp,#4
    000000B1 2A                     288 	ld	a, (hl+)
    000000B2 5E                     289 	ld	e, (hl)
    000000B3 F8 00                  290 	ldhl	sp,#0
    000000B5 22                     291 	ld	(hl+), a
    000000B6 73                     292 	ld	(hl), e
    000000B7 F8 06                  293 	ldhl	sp,#(7 - 1)
    000000B9 5E                     294 	ld	e, (hl)
    000000BA 23                     295 	inc	hl
    000000BB 56                     296 	ld	d, (hl)
    000000BC 21 00 80               297 	ld	hl, #0x8000
    000000BF 19                     298 	add	hl, de
    000000C0 4D                     299 	ld	c, l
    000000C1 44                     300 	ld	b, h
    000000C2 F8 08                  301 	ldhl	sp,#8
    000000C4 2A                     302 	ld	a, (hl+)
    000000C5 66                     303 	ld	h, (hl)
    000000C6 6F                     304 	ld	l, a
    000000C7 E5                     305 	push	hl
    000000C8 F8 02                  306 	ldhl	sp,#2
    000000CA 2A                     307 	ld	a, (hl+)
    000000CB 66                     308 	ld	h, (hl)
    000000CC 6F                     309 	ld	l, a
    000000CD E5                     310 	push	hl
    000000CE C5                     311 	push	bc
    000000CF CDr74r00               312 	call	_fastcpy
    000000D2 E8 06                  313 	add	sp, #6
                                    314 ;src/gb.c:152: }
    000000D4 E8 02                  315 	add	sp, #2
    000000D6 C9                     316 	ret
                                    317 ;src/gb.c:154: void set_bg_map(uint8_t* _data, uint16_t _addr, uint16_t _size){
                                    318 ;	---------------------------------
                                    319 ; Function set_bg_map
                                    320 ; ---------------------------------
    000000D7                        321 _set_bg_map::
    000000D7 E8 FE                  322 	add	sp, #-2
                                    323 ;src/gb.c:155: fastcpy(BG_MAP + _addr, _data, _size);
    000000D9 F8 04                  324 	ldhl	sp,#4
    000000DB 2A                     325 	ld	a, (hl+)
    000000DC 5E                     326 	ld	e, (hl)
    000000DD F8 00                  327 	ldhl	sp,#0
    000000DF 22                     328 	ld	(hl+), a
    000000E0 73                     329 	ld	(hl), e
    000000E1 F8 06                  330 	ldhl	sp,#(7 - 1)
    000000E3 5E                     331 	ld	e, (hl)
    000000E4 23                     332 	inc	hl
    000000E5 56                     333 	ld	d, (hl)
    000000E6 21 00 98               334 	ld	hl, #0x9800
    000000E9 19                     335 	add	hl, de
    000000EA 4D                     336 	ld	c, l
    000000EB 44                     337 	ld	b, h
    000000EC F8 08                  338 	ldhl	sp,#8
    000000EE 2A                     339 	ld	a, (hl+)
    000000EF 66                     340 	ld	h, (hl)
    000000F0 6F                     341 	ld	l, a
    000000F1 E5                     342 	push	hl
    000000F2 F8 02                  343 	ldhl	sp,#2
    000000F4 2A                     344 	ld	a, (hl+)
    000000F5 66                     345 	ld	h, (hl)
    000000F6 6F                     346 	ld	l, a
    000000F7 E5                     347 	push	hl
    000000F8 C5                     348 	push	bc
    000000F9 CDr74r00               349 	call	_fastcpy
    000000FC E8 06                  350 	add	sp, #6
                                    351 ;src/gb.c:156: }
    000000FE E8 02                  352 	add	sp, #2
    00000100 C9                     353 	ret
                                    354 ;src/gb.c:158: void set_bg_map_tile(uint16_t _addr, uint8_t _tile){
                                    355 ;	---------------------------------
                                    356 ; Function set_bg_map_tile
                                    357 ; ---------------------------------
    00000101                        358 _set_bg_map_tile::
                                    359 ;src/gb.c:159: *reg(BG_MAP + _addr) = _tile;
    00000101 F8 02                  360 	ldhl	sp,#(3 - 1)
    00000103 5E                     361 	ld	e, (hl)
    00000104 23                     362 	inc	hl
    00000105 56                     363 	ld	d, (hl)
    00000106 21 00 98               364 	ld	hl, #0x9800
    00000109 19                     365 	add	hl, de
    0000010A 4D                     366 	ld	c, l
    0000010B 44                     367 	ld	b, h
    0000010C F8 04                  368 	ldhl	sp,#4
    0000010E 7E                     369 	ld	a, (hl)
    0000010F 02                     370 	ld	(bc), a
                                    371 ;src/gb.c:160: }
    00000110 C9                     372 	ret
                                    373 ;src/gb.c:162: void update_bg_map_tile(uint16_t _addr, uint8_t _tile){
                                    374 ;	---------------------------------
                                    375 ; Function update_bg_map_tile
                                    376 ; ---------------------------------
    00000111                        377 _update_bg_map_tile::
    00000111 E8 FE                  378 	add	sp, #-2
                                    379 ;src/gb.c:163: vram_transfer_buffer[(vram_transfer_size << 2) + 0] = (BG_MAP_ADDR + _addr) & 0xFF;
    00000113 21rA0r00               380 	ld	hl, #_vram_transfer_size
    00000116 7E                     381 	ld	a, (hl)
    00000117 87                     382 	add	a, a
    00000118 87                     383 	add	a, a
    00000119 4F                     384 	ld	c, a
    0000011A 17                     385 	rla
    0000011B 9F                     386 	sbc	a, a
    0000011C 47                     387 	ld	b, a
    0000011D 21rA1r00               388 	ld	hl, #_vram_transfer_buffer
    00000120 09                     389 	add	hl, bc
    00000121 4D                     390 	ld	c, l
    00000122 44                     391 	ld	b, h
    00000123 F8 04                  392 	ldhl	sp,#4
    00000125 7E                     393 	ld	a, (hl)
    00000126 02                     394 	ld	(bc), a
                                    395 ;src/gb.c:164: vram_transfer_buffer[(vram_transfer_size << 2) + 1] = ((BG_MAP_ADDR + _addr) >> 8) & 0xFF;
    00000127 21rA0r00               396 	ld	hl, #_vram_transfer_size
    0000012A 7E                     397 	ld	a, (hl)
    0000012B 87                     398 	add	a, a
    0000012C 87                     399 	add	a, a
    0000012D 3C                     400 	inc	a
    0000012E 4F                     401 	ld	c, a
    0000012F 17                     402 	rla
    00000130 9F                     403 	sbc	a, a
    00000131 47                     404 	ld	b, a
    00000132 21rA1r00               405 	ld	hl, #_vram_transfer_buffer
    00000135 09                     406 	add	hl, bc
    00000136 4D                     407 	ld	c, l
    00000137 44                     408 	ld	b, h
    00000138 F8 04                  409 	ldhl	sp,#(5 - 1)
    0000013A 5E                     410 	ld	e, (hl)
    0000013B 23                     411 	inc	hl
    0000013C 56                     412 	ld	d, (hl)
    0000013D 21 00 98               413 	ld	hl, #0x9800
    00000140 19                     414 	add	hl, de
    00000141 33                     415 	inc	sp
    00000142 33                     416 	inc	sp
    00000143 E5                     417 	push	hl
    00000144 F8 01                  418 	ldhl	sp,#1
    00000146 5E                     419 	ld	e, (hl)
    00000147 16 00                  420 	ld	d, #0x00
    00000149 7B                     421 	ld	a, e
    0000014A 02                     422 	ld	(bc), a
                                    423 ;src/gb.c:165: vram_transfer_buffer[(vram_transfer_size << 2) + 2] = 0x00;
    0000014B 21rA0r00               424 	ld	hl, #_vram_transfer_size
    0000014E 7E                     425 	ld	a, (hl)
    0000014F 87                     426 	add	a, a
    00000150 87                     427 	add	a, a
    00000151 3C                     428 	inc	a
    00000152 3C                     429 	inc	a
    00000153 4F                     430 	ld	c, a
    00000154 17                     431 	rla
    00000155 9F                     432 	sbc	a, a
    00000156 47                     433 	ld	b, a
    00000157 21rA1r00               434 	ld	hl, #_vram_transfer_buffer
    0000015A 09                     435 	add	hl, bc
    0000015B 4D                     436 	ld	c, l
    0000015C 44                     437 	ld	b, h
    0000015D AF                     438 	xor	a, a
    0000015E 02                     439 	ld	(bc), a
                                    440 ;src/gb.c:166: vram_transfer_buffer[(vram_transfer_size << 2) + 3] = _tile;
    0000015F 21rA0r00               441 	ld	hl, #_vram_transfer_size
    00000162 7E                     442 	ld	a, (hl)
    00000163 87                     443 	add	a, a
    00000164 87                     444 	add	a, a
    00000165 3C                     445 	inc	a
    00000166 3C                     446 	inc	a
    00000167 3C                     447 	inc	a
    00000168 4F                     448 	ld	c, a
    00000169 17                     449 	rla
    0000016A 9F                     450 	sbc	a, a
    0000016B 47                     451 	ld	b, a
    0000016C 21rA1r00               452 	ld	hl, #_vram_transfer_buffer
    0000016F 09                     453 	add	hl, bc
    00000170 4D                     454 	ld	c, l
    00000171 44                     455 	ld	b, h
    00000172 F8 06                  456 	ldhl	sp,#6
    00000174 7E                     457 	ld	a, (hl)
    00000175 02                     458 	ld	(bc), a
                                    459 ;src/gb.c:167: vram_transfer_size++;
    00000176 21rA0r00               460 	ld	hl, #_vram_transfer_size
    00000179 34                     461 	inc	(hl)
                                    462 ;src/gb.c:168: }
    0000017A E8 02                  463 	add	sp, #2
    0000017C C9                     464 	ret
                                    465 ;src/gb.c:170: void set_obj_chr(uint8_t* _data, uint16_t _addr, uint16_t _size){
                                    466 ;	---------------------------------
                                    467 ; Function set_obj_chr
                                    468 ; ---------------------------------
    0000017D                        469 _set_obj_chr::
    0000017D E8 FE                  470 	add	sp, #-2
                                    471 ;src/gb.c:171: fastcpy(OBJ_CHR + _addr, _data, _size);
    0000017F F8 04                  472 	ldhl	sp,#4
    00000181 2A                     473 	ld	a, (hl+)
    00000182 5E                     474 	ld	e, (hl)
    00000183 F8 00                  475 	ldhl	sp,#0
    00000185 22                     476 	ld	(hl+), a
    00000186 73                     477 	ld	(hl), e
    00000187 F8 06                  478 	ldhl	sp,#(7 - 1)
    00000189 5E                     479 	ld	e, (hl)
    0000018A 23                     480 	inc	hl
    0000018B 56                     481 	ld	d, (hl)
    0000018C 21 00 80               482 	ld	hl, #0x8000
    0000018F 19                     483 	add	hl, de
    00000190 4D                     484 	ld	c, l
    00000191 44                     485 	ld	b, h
    00000192 F8 08                  486 	ldhl	sp,#8
    00000194 2A                     487 	ld	a, (hl+)
    00000195 66                     488 	ld	h, (hl)
    00000196 6F                     489 	ld	l, a
    00000197 E5                     490 	push	hl
    00000198 F8 02                  491 	ldhl	sp,#2
    0000019A 2A                     492 	ld	a, (hl+)
    0000019B 66                     493 	ld	h, (hl)
    0000019C 6F                     494 	ld	l, a
    0000019D E5                     495 	push	hl
    0000019E C5                     496 	push	bc
    0000019F CDr74r00               497 	call	_fastcpy
    000001A2 E8 06                  498 	add	sp, #6
                                    499 ;src/gb.c:172: }
    000001A4 E8 02                  500 	add	sp, #2
    000001A6 C9                     501 	ret
                                    502 ;src/gb.c:174: void set_obj(obj_t* _obj, uint8_t _x, uint8_t _y, uint8_t _tile, uint8_t _attr){
                                    503 ;	---------------------------------
                                    504 ; Function set_obj
                                    505 ; ---------------------------------
    000001A7                        506 _set_obj::
    000001A7 E8 FE                  507 	add	sp, #-2
                                    508 ;src/gb.c:175: _obj->x     = _x;
    000001A9 F8 04                  509 	ldhl	sp,#4
    000001AB 2A                     510 	ld	a, (hl+)
    000001AC 5E                     511 	ld	e, (hl)
    000001AD F8 00                  512 	ldhl	sp,#0
    000001AF 22                     513 	ld	(hl+), a
    000001B0 73                     514 	ld	(hl), e
    000001B1 C1                     515 	pop	bc
    000001B2 C5                     516 	push	bc
    000001B3 03                     517 	inc	bc
    000001B4 F8 06                  518 	ldhl	sp,#6
    000001B6 7E                     519 	ld	a, (hl)
    000001B7 02                     520 	ld	(bc), a
                                    521 ;src/gb.c:176: _obj->y     = _y;
    000001B8 D1                     522 	pop	de
    000001B9 D5                     523 	push	de
    000001BA 23                     524 	inc	hl
    000001BB 7E                     525 	ld	a, (hl)
    000001BC 12                     526 	ld	(de), a
                                    527 ;src/gb.c:177: _obj->tile  = _tile;
    000001BD C1                     528 	pop	bc
    000001BE C5                     529 	push	bc
    000001BF 03                     530 	inc	bc
    000001C0 03                     531 	inc	bc
    000001C1 23                     532 	inc	hl
    000001C2 7E                     533 	ld	a, (hl)
    000001C3 02                     534 	ld	(bc), a
                                    535 ;src/gb.c:178: _obj->attr  = _attr;
    000001C4 C1                     536 	pop	bc
    000001C5 C5                     537 	push	bc
    000001C6 03                     538 	inc	bc
    000001C7 03                     539 	inc	bc
    000001C8 03                     540 	inc	bc
    000001C9 23                     541 	inc	hl
    000001CA 7E                     542 	ld	a, (hl)
    000001CB 02                     543 	ld	(bc), a
                                    544 ;src/gb.c:179: }
    000001CC E8 02                  545 	add	sp, #2
    000001CE C9                     546 	ret
                                    547 ;src/gb.c:181: uint8_t copy_to_oam_obj(obj_t* _obj, uint8_t _slot){
                                    548 ;	---------------------------------
                                    549 ; Function copy_to_oam_obj
                                    550 ; ---------------------------------
    000001CF                        551 _copy_to_oam_obj::
                                    552 ;src/gb.c:217: __endasm;
                         00000002   553 	obj	= 2
                         00000004   554 	slot	= 4
    000001CF F8 02                  555 	ldhl	sp, #obj
    000001D1 2A                     556 	ld	a, (hl+)
    000001D2 56                     557 	ld	d, (hl)
    000001D3 5F                     558 	ld	e, a
    000001D4 F8 04                  559 	ldhl	sp, #slot
    000001D6 6E                     560 	ld	l, (hl)
    000001D7 26 00                  561 	ld	h, #0
    000001D9 29                     562 	add	hl, hl
    000001DA 29                     563 	add	hl, hl
    000001DB 01r00r00               564 	ld	bc, #_obj
    000001DE 09                     565 	add	hl, bc
    000001DF 1A                     566 	ld	a, (de) ;copy Y
    000001E0 13                     567 	inc	de
    000001E1 C6 10                  568 	add	#16
    000001E3 22                     569 	ld	(hl+), a
    000001E4 1A                     570 	ld	a, (de) ;copy X
    000001E5 13                     571 	inc	de
    000001E6 C6 08                  572 	add	#8
    000001E8 22                     573 	ld	(hl+), a
    000001E9 1A                     574 	ld	a, (de) ;copy Tile
    000001EA 13                     575 	inc	de
    000001EB 22                     576 	ld	(hl+), a
    000001EC 1A                     577 	ld	a, (de) ;copy Attr
    000001ED 77                     578 	ld	(hl), a
    000001EE F8 04                  579 	ldhl	sp, #slot
    000001F0 5E                     580 	ld	e, (hl)
    000001F1 1C                     581 	inc	e
                                    582 ;src/gb.c:218: }
    000001F2 C9                     583 	ret
                                    584 ;src/gb.c:220: void read_joypad(){
                                    585 ;	---------------------------------
                                    586 ; Function read_joypad
                                    587 ; ---------------------------------
    000001F3                        588 _read_joypad::
                                    589 ;src/gb.c:247: __endasm;
    000001F3 21 00 FF               590 	ld	hl, #0xFF00
    000001F6 FArF2r00               591 	ld	a, (_joy0)
    000001F9 EArF3r00               592 	ld	(_old_joy0), a
    000001FC 36 20                  593 	ld	(hl), #0x20
    000001FE 4E                     594 	ld	c, (hl)
    000001FF 4E                     595 	ld	c, (hl)
    00000200 4E                     596 	ld	c, (hl)
    00000201 7E                     597 	ld	a, (hl)
    00000202 CB 37                  598 	swap	a
    00000204 E6 F0                  599 	and	#0xF0
    00000206 47                     600 	ld	b, a
    00000207 36 10                  601 	ld	(hl), #0x10
    00000209 4E                     602 	ld	c, (hl)
    0000020A 4E                     603 	ld	c, (hl)
    0000020B 4E                     604 	ld	c, (hl)
    0000020C 7E                     605 	ld	a, (hl)
    0000020D E6 0F                  606 	and	#0x0F
    0000020F B0                     607 	or	b
    00000210 36 30                  608 	ld	(hl), #0x30
    00000212 2F                     609 	cpl
    00000213 EArF2r00               610 	ld	(_joy0), a
                                    611 ;src/gb.c:248: }
    00000216 C9                     612 	ret
                                    613 ;src/gb.c:249: bool key_push(uint8_t _key){return (!(old_joy0 & _key) && (joy0 & _key));}
                                    614 ;	---------------------------------
                                    615 ; Function key_push
                                    616 ; ---------------------------------
    00000217                        617 _key_push::
    00000217 21rF3r00               618 	ld	hl, #_old_joy0
    0000021A 7E                     619 	ld	a, (hl)
    0000021B F8 02                  620 	ldhl	sp,#2
    0000021D A6                     621 	and	a,(hl)
    0000021E 20 09                  622 	jr	NZ,00103$
    00000220 21rF2r00               623 	ld	hl, #_joy0
    00000223 7E                     624 	ld	a, (hl)
    00000224 F8 02                  625 	ldhl	sp,#2
    00000226 A6                     626 	and	a,(hl)
    00000227 20 03                  627 	jr	NZ,00104$
    00000229                        628 00103$:
    00000229 AF                     629 	xor	a, a
    0000022A 18 02                  630 	jr	00105$
    0000022C                        631 00104$:
    0000022C 3E 01                  632 	ld	a, #0x01
    0000022E                        633 00105$:
    0000022E 5F                     634 	ld	e, a
    0000022F C9                     635 	ret
                                    636 ;src/gb.c:250: bool key_hold(uint8_t _key){return (joy0 & _key);}
                                    637 ;	---------------------------------
                                    638 ; Function key_hold
                                    639 ; ---------------------------------
    00000230                        640 _key_hold::
    00000230 21rF2r00               641 	ld	hl, #_joy0
    00000233 7E                     642 	ld	a, (hl)
    00000234 F8 02                  643 	ldhl	sp,#2
    00000236 A6                     644 	and	a, (hl)
    00000237 4F                     645 	ld	c, a
    00000238 AF                     646 	xor	a, a
    00000239 B9                     647 	cp	a, c
    0000023A 17                     648 	rla
    0000023B 5F                     649 	ld	e, a
    0000023C C9                     650 	ret
                                    651 ;src/gb.c:251: bool key_release(uint8_t _key){return ((old_joy0 & _key) && !(joy0 & _key));}
                                    652 ;	---------------------------------
                                    653 ; Function key_release
                                    654 ; ---------------------------------
    0000023D                        655 _key_release::
    0000023D 21rF3r00               656 	ld	hl, #_old_joy0
    00000240 7E                     657 	ld	a, (hl)
    00000241 F8 02                  658 	ldhl	sp,#2
    00000243 A6                     659 	and	a,(hl)
    00000244 28 09                  660 	jr	Z,00103$
    00000246 21rF2r00               661 	ld	hl, #_joy0
    00000249 7E                     662 	ld	a, (hl)
    0000024A F8 02                  663 	ldhl	sp,#2
    0000024C A6                     664 	and	a,(hl)
    0000024D 28 03                  665 	jr	Z,00104$
    0000024F                        666 00103$:
    0000024F AF                     667 	xor	a, a
    00000250 18 02                  668 	jr	00105$
    00000252                        669 00104$:
    00000252 3E 01                  670 	ld	a, #0x01
    00000254                        671 00105$:
    00000254 5F                     672 	ld	e, a
    00000255 C9                     673 	ret
                                    674 	.area _CODE
                                    675 	.area _CABS (ABS)
